; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

declare void @memrefCopy(i64, ptr, ptr)

declare ptr @malloc(i64)

define void @origin_index_select(i64 %0, ptr %1, i64 %2, ptr %3, i64 %4, ptr %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12) {
  %14 = insertvalue { i64, ptr } poison, i64 %4, 0
  %15 = insertvalue { i64, ptr } %14, ptr %5, 1
  %16 = insertvalue { i64, ptr } poison, i64 %2, 0
  %17 = insertvalue { i64, ptr } %16, ptr %3, 1
  %18 = insertvalue { i64, ptr } poison, i64 %0, 0
  %19 = insertvalue { i64, ptr } %18, ptr %1, 1
  %20 = mul i32 %10, 49299
  %21 = sext i32 %20 to i64
  br label %22

22:                                               ; preds = %118, %13
  %23 = phi i32 [ %155, %118 ], [ 0, %13 ]
  %24 = icmp slt i32 %23, 49299
  br i1 %24, label %25, label %156

25:                                               ; preds = %22
  %26 = sext i32 %23 to i64
  %27 = add i64 %21, %26
  %28 = extractvalue { i64, ptr } %17, 1
  %29 = load ptr, ptr %28, align 8
  %30 = getelementptr ptr, ptr %28, i32 1
  %31 = load ptr, ptr %30, align 8
  %32 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } poison, ptr %29, 0
  %33 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %32, ptr %31, 1
  %34 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %33, i64 %27, 2
  %35 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %34, i64 1024, 3, 0
  %36 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %35, i64 1, 4, 0
  %37 = add i64 %21, 1024
  %38 = add i64 %37, %26
  %39 = call i64 @llvm.smin.i64(i64 %38, i64 1971940)
  %40 = call i64 @llvm.smax.i64(i64 %39, i64 %27)
  %41 = sub i64 %40, %27
  %42 = call ptr @malloc(i64 4096)
  %43 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } poison, ptr %42, 0
  %44 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %43, ptr %42, 1
  %45 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %44, i64 0, 2
  %46 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %45, i64 1024, 3, 0
  %47 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %46, i64 1, 4, 0
  %48 = icmp slt i64 %41, 1024
  br i1 %48, label %49, label %57

49:                                               ; preds = %25
  br label %50

50:                                               ; preds = %53, %49
  %51 = phi i64 [ %55, %53 ], [ 0, %49 ]
  %52 = icmp slt i64 %51, 1024
  br i1 %52, label %53, label %56

53:                                               ; preds = %50
  %54 = getelementptr inbounds nuw i32, ptr %42, i64 %51
  store i32 0, ptr %54, align 4
  %55 = add i64 %51, 1
  br label %50

56:                                               ; preds = %50
  br label %57

57:                                               ; preds = %56, %25
  %58 = insertvalue { ptr, ptr, i64 } poison, ptr %29, 0
  %59 = insertvalue { ptr, ptr, i64 } %58, ptr %31, 1
  %60 = insertvalue { ptr, ptr, i64 } %59, i64 0, 2
  %61 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } poison, ptr %29, 0
  %62 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %61, ptr %31, 1
  %63 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %62, i64 %27, 2
  %64 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %63, i64 %41, 3, 0
  %65 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %64, i64 1, 4, 0
  %66 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } poison, ptr %42, 0
  %67 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %66, ptr %42, 1
  %68 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %67, i64 0, 2
  %69 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %68, i64 %41, 3, 0
  %70 = insertvalue { ptr, ptr, i64, [1 x i64], [1 x i64] } %69, i64 1, 4, 0
  %71 = call ptr @llvm.stacksave.p0()
  %72 = alloca { ptr, ptr, i64, [1 x i64], [1 x i64] }, i64 1, align 8
  store { ptr, ptr, i64, [1 x i64], [1 x i64] } %65, ptr %72, align 8
  %73 = insertvalue { i64, ptr } { i64 1, ptr poison }, ptr %72, 1
  %74 = alloca { ptr, ptr, i64, [1 x i64], [1 x i64] }, i64 1, align 8
  store { ptr, ptr, i64, [1 x i64], [1 x i64] } %70, ptr %74, align 8
  %75 = insertvalue { i64, ptr } { i64 1, ptr poison }, ptr %74, 1
  %76 = alloca { i64, ptr }, i64 1, align 8
  store { i64, ptr } %73, ptr %76, align 8
  %77 = alloca { i64, ptr }, i64 1, align 8
  store { i64, ptr } %75, ptr %77, align 8
  call void @memrefCopy(i64 4, ptr %76, ptr %77)
  call void @llvm.stackrestore.p0(ptr %71)
  %78 = call i64 @llvm.smin.i64(i64 %41, i64 1024)
  %79 = call ptr @malloc(i64 65536)
  %80 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } poison, ptr %79, 0
  %81 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %80, ptr %79, 1
  %82 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %81, i64 0, 2
  %83 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %82, i64 1024, 3, 0
  %84 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %83, i64 16, 3, 1
  %85 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %84, i64 16, 4, 0
  %86 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %85, i64 1, 4, 1
  %87 = call i64 @llvm.smin.i64(i64 %78, i64 1024)
  br label %88

88:                                               ; preds = %91, %57
  %89 = phi i64 [ %117, %91 ], [ 0, %57 ]
  %90 = icmp slt i64 %89, %87
  br i1 %90, label %91, label %118

91:                                               ; preds = %88
  %92 = getelementptr inbounds nuw i32, ptr %42, i64 %89
  %93 = load i32, ptr %92, align 4
  %94 = sext i32 %93 to i64
  %95 = mul i64 %94, 16
  %96 = extractvalue { i64, ptr } %19, 1
  %97 = load ptr, ptr %96, align 8
  %98 = getelementptr ptr, ptr %96, i32 1
  %99 = load ptr, ptr %98, align 8
  %100 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } poison, ptr %97, 0
  %101 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %100, ptr %99, 1
  %102 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %101, i64 %95, 2
  %103 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %102, i64 1, 3, 0
  %104 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %103, i64 16, 4, 0
  %105 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %104, i64 16, 3, 1
  %106 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %105, i64 1, 4, 1
  %107 = mul nsw i64 %89, 16
  %108 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } poison, ptr %79, 0
  %109 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %108, ptr %79, 1
  %110 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %109, i64 %107, 2
  %111 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %110, i64 1, 3, 0
  %112 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %111, i64 16, 4, 0
  %113 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %112, i64 16, 3, 1
  %114 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %113, i64 1, 4, 1
  %115 = getelementptr float, ptr %99, i64 %95
  %116 = getelementptr float, ptr %79, i64 %107
  call void @llvm.memcpy.p0.p0.i64(ptr %116, ptr %115, i64 64, i1 false)
  %117 = add i64 %89, 1
  br label %88

118:                                              ; preds = %88
  %119 = mul i64 %27, 16
  %120 = extractvalue { i64, ptr } %15, 1
  %121 = load ptr, ptr %120, align 8
  %122 = getelementptr ptr, ptr %120, i32 1
  %123 = load ptr, ptr %122, align 8
  %124 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } poison, ptr %121, 0
  %125 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %124, ptr %123, 1
  %126 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %125, i64 %119, 2
  %127 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %126, i64 1024, 3, 0
  %128 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %127, i64 16, 4, 0
  %129 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %128, i64 16, 3, 1
  %130 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %129, i64 1, 4, 1
  %131 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } poison, ptr %79, 0
  %132 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %131, ptr %79, 1
  %133 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %132, i64 0, 2
  %134 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %133, i64 %78, 3, 0
  %135 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %134, i64 16, 4, 0
  %136 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %135, i64 16, 3, 1
  %137 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %136, i64 1, 4, 1
  %138 = insertvalue { ptr, ptr, i64 } poison, ptr %121, 0
  %139 = insertvalue { ptr, ptr, i64 } %138, ptr %123, 1
  %140 = insertvalue { ptr, ptr, i64 } %139, i64 0, 2
  %141 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } poison, ptr %121, 0
  %142 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %141, ptr %123, 1
  %143 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %142, i64 %119, 2
  %144 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %143, i64 %78, 3, 0
  %145 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %144, i64 16, 4, 0
  %146 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %145, i64 16, 3, 1
  %147 = insertvalue { ptr, ptr, i64, [2 x i64], [2 x i64] } %146, i64 1, 4, 1
  %148 = call ptr @llvm.stacksave.p0()
  %149 = alloca { ptr, ptr, i64, [2 x i64], [2 x i64] }, i64 1, align 8
  store { ptr, ptr, i64, [2 x i64], [2 x i64] } %137, ptr %149, align 8
  %150 = insertvalue { i64, ptr } { i64 2, ptr poison }, ptr %149, 1
  %151 = alloca { ptr, ptr, i64, [2 x i64], [2 x i64] }, i64 1, align 8
  store { ptr, ptr, i64, [2 x i64], [2 x i64] } %147, ptr %151, align 8
  %152 = insertvalue { i64, ptr } { i64 2, ptr poison }, ptr %151, 1
  %153 = alloca { i64, ptr }, i64 1, align 8
  store { i64, ptr } %150, ptr %153, align 8
  %154 = alloca { i64, ptr }, i64 1, align 8
  store { i64, ptr } %152, ptr %154, align 8
  call void @memrefCopy(i64 4, ptr %153, ptr %154)
  call void @llvm.stackrestore.p0(ptr %148)
  %155 = add i32 %23, 1024
  br label %22

156:                                              ; preds = %22
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smax.i64(i64, i64) #0

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare ptr @llvm.stacksave.p0() #1

; Function Attrs: nocallback nofree nosync nounwind willreturn
declare void @llvm.stackrestore.p0(ptr) #1

; Function Attrs: nocallback nofree nounwind willreturn memory(argmem: readwrite)
declare void @llvm.memcpy.p0.p0.i64(ptr noalias writeonly captures(none), ptr noalias readonly captures(none), i64, i1 immarg) #2

attributes #0 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind willreturn }
attributes #2 = { nocallback nofree nounwind willreturn memory(argmem: readwrite) }

!llvm.module.flags = !{!0}

!0 = !{i32 2, !"Debug Info Version", i32 3}
