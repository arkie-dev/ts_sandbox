// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc33 = loc("in_ptr"(#loc))
#loc34 = loc("indices_ptr"(#loc))
#loc35 = loc("out_ptr"(#loc))
#loc36 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %g_begin = tt.get_program_id x : i32 loc(#loc37)
    %g_begin_0 = arith.constant 49299 : i32 loc(#loc38)
    %g_begin_1 = arith.constant 49299 : i32 loc(#loc38)
    %g_begin_2 = arith.extsi %g_begin : i32 to i64 loc(#loc38)
    %g_begin_3 = arith.extsi %g_begin_1 : i32 to i64 loc(#loc38)
    %g_begin_4 = arith.muli %g_begin_2, %g_begin_3 : i64 loc(#loc38)
    %g_begin_5 = arith.constant 2147483647 : i64 loc(#loc38)
    %g_begin_6 = arith.constant -2147483648 : i64 loc(#loc38)
    %g_begin_7 = arith.cmpi sle, %g_begin_4, %g_begin_5 : i64 loc(#loc38)
    %g_begin_8 = arith.cmpi sge, %g_begin_4, %g_begin_6 : i64 loc(#loc38)
    %g_begin_9 = arith.andi %g_begin_7, %g_begin_8 : i1 loc(#loc38)
    %g_begin_10 = arith.muli %g_begin, %g_begin_1 : i32 loc(#loc38)
    %c0_i32 = arith.constant 0 : i32 loc(#loc3)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc3)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc3)
    %0 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc3)
    %1 = arith.bitcast %c49299_i32 : i32 to i32 loc(#loc3)
    %2 = arith.bitcast %c1024_i32 : i32 to i32 loc(#loc3)
    %3 = ub.poison : i32 loc(#loc3)
    scf.for %goffs = %0 to %1 step %2  : i32 {
      %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc39)
      %g_idx_11 = tt.splat %g_begin_10 : i32 -> tensor<1024xi32> loc(#loc40)
      %g_idx_12 = arith.extsi %g_idx : tensor<1024xi32> to tensor<1024xi64> loc(#loc40)
      %g_idx_13 = arith.extsi %g_idx_11 : tensor<1024xi32> to tensor<1024xi64> loc(#loc40)
      %g_idx_14 = arith.addi %g_idx_12, %g_idx_13 : tensor<1024xi64> loc(#loc40)
      %g_idx_15 = arith.constant 2147483647 : i64 loc(#loc40)
      %g_idx_16 = arith.constant -2147483648 : i64 loc(#loc40)
      %g_idx_17 = arith.constant dense<2147483647> : tensor<1024xi64> loc(#loc40)
      %g_idx_18 = arith.cmpi sle, %g_idx_14, %g_idx_17 : tensor<1024xi64> loc(#loc40)
      %g_idx_19 = arith.constant dense<-2147483648> : tensor<1024xi64> loc(#loc40)
      %g_idx_20 = arith.cmpi sge, %g_idx_14, %g_idx_19 : tensor<1024xi64> loc(#loc40)
      %g_idx_21 = arith.andi %g_idx_18, %g_idx_20 : tensor<1024xi1> loc(#loc40)
      %g_idx_22 = arith.addi %g_idx, %g_idx_11 : tensor<1024xi32> loc(#loc40)
      %g_idx_23 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc41)
      %g_idx_24 = arith.extsi %g_idx_22 : tensor<1024xi32> to tensor<1024xi64> loc(#loc41)
      %g_idx_25 = arith.extsi %g_idx_23 : tensor<1024xi32> to tensor<1024xi64> loc(#loc41)
      %g_idx_26 = arith.addi %g_idx_24, %g_idx_25 : tensor<1024xi64> loc(#loc41)
      %g_idx_27 = arith.constant 2147483647 : i64 loc(#loc41)
      %g_idx_28 = arith.constant -2147483648 : i64 loc(#loc41)
      %g_idx_29 = arith.constant dense<2147483647> : tensor<1024xi64> loc(#loc41)
      %g_idx_30 = arith.cmpi sle, %g_idx_26, %g_idx_29 : tensor<1024xi64> loc(#loc41)
      %g_idx_31 = arith.constant dense<-2147483648> : tensor<1024xi64> loc(#loc41)
      %g_idx_32 = arith.cmpi sge, %g_idx_26, %g_idx_31 : tensor<1024xi64> loc(#loc41)
      %g_idx_33 = arith.andi %g_idx_30, %g_idx_32 : tensor<1024xi1> loc(#loc41)
      %g_idx_34 = arith.addi %g_idx_22, %g_idx_23 : tensor<1024xi32> loc(#loc41)
      %g_mask = arith.constant 1971940 : i32 loc(#loc42)
      %g_mask_35 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc42)
      %g_mask_36 = arith.cmpi slt, %g_idx_34, %g_mask_35 : tensor<1024xi32> loc(#loc42)
      %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc43)
      %indices_37 = tt.addptr %indices, %g_idx_34 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc43)
      %indices_38 = arith.constant 0 : i32 loc(#loc44)
      %indices_39 = arith.constant dense<0> : tensor<1024xi32> loc(#loc44)
      %indices_40 = tt.load %indices_37, %g_mask_36, %indices_39 : tensor<1024x!tt.ptr<i32>> loc(#loc44)
      %c0_i32_41 = arith.constant 0 : i32 loc(#loc10)
      %c16_i32 = arith.constant 16 : i32 loc(#loc10)
      %c16_i32_42 = arith.constant 16 : i32 loc(#loc10)
      %4 = arith.bitcast %c0_i32_41 : i32 to i32 loc(#loc10)
      %5 = arith.bitcast %c16_i32 : i32 to i32 loc(#loc10)
      %6 = arith.bitcast %c16_i32_42 : i32 to i32 loc(#loc10)
      %7 = ub.poison : i32 loc(#loc10)
      scf.for %other_offset = %4 to %5 step %6  : i32 {
        %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc45)
        %other_idx_43 = tt.splat %other_offset : i32 -> tensor<16xi32> loc(#loc46)
        %other_idx_44 = arith.extsi %other_idx : tensor<16xi32> to tensor<16xi64> loc(#loc46)
        %other_idx_45 = arith.extsi %other_idx_43 : tensor<16xi32> to tensor<16xi64> loc(#loc46)
        %other_idx_46 = arith.addi %other_idx_44, %other_idx_45 : tensor<16xi64> loc(#loc46)
        %other_idx_47 = arith.constant 2147483647 : i64 loc(#loc46)
        %other_idx_48 = arith.constant -2147483648 : i64 loc(#loc46)
        %other_idx_49 = arith.constant dense<2147483647> : tensor<16xi64> loc(#loc46)
        %other_idx_50 = arith.cmpi sle, %other_idx_46, %other_idx_49 : tensor<16xi64> loc(#loc46)
        %other_idx_51 = arith.constant dense<-2147483648> : tensor<16xi64> loc(#loc46)
        %other_idx_52 = arith.cmpi sge, %other_idx_46, %other_idx_51 : tensor<16xi64> loc(#loc46)
        %other_idx_53 = arith.andi %other_idx_50, %other_idx_52 : tensor<16xi1> loc(#loc46)
        %other_idx_54 = arith.addi %other_idx, %other_idx_43 : tensor<16xi32> loc(#loc46)
        %other_mask = arith.constant 16 : i32 loc(#loc47)
        %other_mask_55 = arith.constant dense<16> : tensor<16xi32> loc(#loc47)
        %other_mask_56 = arith.cmpi slt, %other_idx_54, %other_mask_55 : tensor<16xi32> loc(#loc47)
        %tmp_buf = tt.expand_dims %indices_40 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc48)
        %tmp_buf_57 = arith.constant 16 : i32 loc(#loc49)
        %tmp_buf_58 = arith.constant 16 : i32 loc(#loc49)
        %tmp_buf_59 = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc49)
        %tmp_buf_60 = arith.extsi %tmp_buf : tensor<1024x1xi32> to tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_61 = arith.extsi %tmp_buf_59 : tensor<1024x1xi32> to tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_62 = arith.muli %tmp_buf_60, %tmp_buf_61 : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_63 = arith.constant 2147483647 : i64 loc(#loc49)
        %tmp_buf_64 = arith.constant -2147483648 : i64 loc(#loc49)
        %tmp_buf_65 = arith.constant dense<2147483647> : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_66 = arith.cmpi sle, %tmp_buf_62, %tmp_buf_65 : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_67 = arith.constant dense<-2147483648> : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_68 = arith.cmpi sge, %tmp_buf_62, %tmp_buf_67 : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_69 = arith.andi %tmp_buf_66, %tmp_buf_68 : tensor<1024x1xi1> loc(#loc49)
        %tmp_buf_70 = arith.muli %tmp_buf, %tmp_buf_59 : tensor<1024x1xi32> loc(#loc49)
        %tmp_buf_71 = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc50)
        %tmp_buf_72 = tt.addptr %tmp_buf_71, %tmp_buf_70 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc50)
        %tmp_buf_73 = tt.expand_dims %other_idx_54 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc51)
        %tmp_buf_74 = tt.broadcast %tmp_buf_72 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc52)
        %tmp_buf_75 = tt.broadcast %tmp_buf_73 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc52)
        %tmp_buf_76 = tt.addptr %tmp_buf_74, %tmp_buf_75 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc52)
        %tmp_buf_77 = tt.expand_dims %g_mask_36 {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc53)
        %tmp_buf_78 = tt.expand_dims %other_mask_56 {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc54)
        %tmp_buf_79 = tt.broadcast %tmp_buf_77 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc55)
        %tmp_buf_80 = tt.broadcast %tmp_buf_78 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc55)
        %tmp_buf_81 = arith.andi %tmp_buf_79, %tmp_buf_80 : tensor<1024x16xi1> loc(#loc55)
        %tmp_buf_82 = tt.load %tmp_buf_76, %tmp_buf_81 : tensor<1024x16x!tt.ptr<f32>> loc(#loc56)
        %8 = tt.expand_dims %g_idx_34 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc23)
        %c16_i32_83 = arith.constant 16 : i32 loc(#loc24)
        %c16_i32_84 = arith.constant 16 : i32 loc(#loc24)
        %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc24)
        %9 = arith.extsi %8 : tensor<1024x1xi32> to tensor<1024x1xi64> loc(#loc24)
        %10 = arith.extsi %cst : tensor<1024x1xi32> to tensor<1024x1xi64> loc(#loc24)
        %11 = arith.muli %9, %10 : tensor<1024x1xi64> loc(#loc24)
        %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc24)
        %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc24)
        %cst_85 = arith.constant dense<2147483647> : tensor<1024x1xi64> loc(#loc24)
        %12 = arith.cmpi sle, %11, %cst_85 : tensor<1024x1xi64> loc(#loc24)
        %cst_86 = arith.constant dense<-2147483648> : tensor<1024x1xi64> loc(#loc24)
        %13 = arith.cmpi sge, %11, %cst_86 : tensor<1024x1xi64> loc(#loc24)
        %14 = arith.andi %12, %13 : tensor<1024x1xi1> loc(#loc24)
        %15 = arith.muli %8, %cst : tensor<1024x1xi32> loc(#loc24)
        %16 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc25)
        %17 = tt.addptr %16, %15 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc25)
        %18 = tt.expand_dims %other_idx_54 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc26)
        %19 = tt.broadcast %17 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc27)
        %20 = tt.broadcast %18 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc27)
        %21 = tt.addptr %19, %20 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc27)
        %22 = tt.expand_dims %g_mask_36 {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc28)
        %23 = tt.expand_dims %other_mask_56 {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc29)
        %24 = tt.broadcast %22 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc30)
        %25 = tt.broadcast %23 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc30)
        %26 = arith.andi %24, %25 : tensor<1024x16xi1> loc(#loc30)
        tt.store %21, %tmp_buf_82, %26 : tensor<1024x16x!tt.ptr<f32>> loc(#loc31)
      } loc(#loc10)
    } loc(#loc3)
    tt.return loc(#loc32)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":37:47)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:52)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:69)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc28 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:94)
#loc29 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:115)
#loc30 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:104)
#loc31 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc32 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc37 = loc("g_begin"(#loc1))
#loc38 = loc("g_begin"(#loc2))
#loc39 = loc("g_idx"(#loc4))
#loc40 = loc("g_idx"(#loc5))
#loc41 = loc("g_idx"(#loc6))
#loc42 = loc("g_mask"(#loc7))
#loc43 = loc("indices"(#loc8))
#loc44 = loc("indices"(#loc9))
#loc45 = loc("other_idx"(#loc11))
#loc46 = loc("other_idx"(#loc12))
#loc47 = loc("other_mask"(#loc13))
#loc48 = loc("tmp_buf"(#loc14))
#loc49 = loc("tmp_buf"(#loc15))
#loc50 = loc("tmp_buf"(#loc16))
#loc51 = loc("tmp_buf"(#loc17))
#loc52 = loc("tmp_buf"(#loc18))
#loc53 = loc("tmp_buf"(#loc19))
#loc54 = loc("tmp_buf"(#loc20))
#loc55 = loc("tmp_buf"(#loc21))
#loc56 = loc("tmp_buf"(#loc22))


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @origin_index_select) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc33 = loc("in_ptr"(#loc))
#loc34 = loc("indices_ptr"(#loc))
#loc35 = loc("out_ptr"(#loc))
#loc36 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %g_begin = tt.get_program_id x : i32 loc(#loc37)
    %g_begin_0 = arith.constant 49299 : i32 loc(#loc38)
    %g_begin_1 = arith.constant 49299 : i32 loc(#loc38)
    %g_begin_2 = arith.extsi %g_begin : i32 to i64 loc(#loc38)
    %g_begin_3 = arith.extsi %g_begin_1 : i32 to i64 loc(#loc38)
    %g_begin_4 = arith.muli %g_begin_2, %g_begin_3 : i64 loc(#loc38)
    %g_begin_5 = arith.constant 2147483647 : i64 loc(#loc38)
    %g_begin_6 = arith.constant -2147483648 : i64 loc(#loc38)
    %g_begin_7 = arith.cmpi sle, %g_begin_4, %g_begin_5 : i64 loc(#loc38)
    %g_begin_8 = arith.cmpi sge, %g_begin_4, %g_begin_6 : i64 loc(#loc38)
    %g_begin_9 = arith.andi %g_begin_7, %g_begin_8 : i1 loc(#loc38)
    %g_begin_10 = arith.muli %g_begin, %g_begin_1 : i32 loc(#loc38)
    %c0_i32 = arith.constant 0 : i32 loc(#loc3)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc3)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc3)
    %0 = arith.bitcast %c0_i32 : i32 to i32 loc(#loc3)
    %1 = arith.bitcast %c49299_i32 : i32 to i32 loc(#loc3)
    %2 = arith.bitcast %c1024_i32 : i32 to i32 loc(#loc3)
    %3 = ub.poison : i32 loc(#loc3)
    scf.for %goffs = %0 to %1 step %2  : i32 {
      %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc39)
      %g_idx_11 = tt.splat %g_begin_10 : i32 -> tensor<1024xi32> loc(#loc40)
      %g_idx_12 = arith.extsi %g_idx : tensor<1024xi32> to tensor<1024xi64> loc(#loc40)
      %g_idx_13 = arith.extsi %g_idx_11 : tensor<1024xi32> to tensor<1024xi64> loc(#loc40)
      %g_idx_14 = arith.addi %g_idx_12, %g_idx_13 : tensor<1024xi64> loc(#loc40)
      %g_idx_15 = arith.constant 2147483647 : i64 loc(#loc40)
      %g_idx_16 = arith.constant -2147483648 : i64 loc(#loc40)
      %g_idx_17 = arith.constant dense<2147483647> : tensor<1024xi64> loc(#loc40)
      %g_idx_18 = arith.cmpi sle, %g_idx_14, %g_idx_17 : tensor<1024xi64> loc(#loc40)
      %g_idx_19 = arith.constant dense<-2147483648> : tensor<1024xi64> loc(#loc40)
      %g_idx_20 = arith.cmpi sge, %g_idx_14, %g_idx_19 : tensor<1024xi64> loc(#loc40)
      %g_idx_21 = arith.andi %g_idx_18, %g_idx_20 : tensor<1024xi1> loc(#loc40)
      %g_idx_22 = arith.addi %g_idx, %g_idx_11 : tensor<1024xi32> loc(#loc40)
      %g_idx_23 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc41)
      %g_idx_24 = arith.extsi %g_idx_22 : tensor<1024xi32> to tensor<1024xi64> loc(#loc41)
      %g_idx_25 = arith.extsi %g_idx_23 : tensor<1024xi32> to tensor<1024xi64> loc(#loc41)
      %g_idx_26 = arith.addi %g_idx_24, %g_idx_25 : tensor<1024xi64> loc(#loc41)
      %g_idx_27 = arith.constant 2147483647 : i64 loc(#loc41)
      %g_idx_28 = arith.constant -2147483648 : i64 loc(#loc41)
      %g_idx_29 = arith.constant dense<2147483647> : tensor<1024xi64> loc(#loc41)
      %g_idx_30 = arith.cmpi sle, %g_idx_26, %g_idx_29 : tensor<1024xi64> loc(#loc41)
      %g_idx_31 = arith.constant dense<-2147483648> : tensor<1024xi64> loc(#loc41)
      %g_idx_32 = arith.cmpi sge, %g_idx_26, %g_idx_31 : tensor<1024xi64> loc(#loc41)
      %g_idx_33 = arith.andi %g_idx_30, %g_idx_32 : tensor<1024xi1> loc(#loc41)
      %g_idx_34 = arith.addi %g_idx_22, %g_idx_23 : tensor<1024xi32> loc(#loc41)
      %g_mask = arith.constant 1971940 : i32 loc(#loc42)
      %g_mask_35 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc42)
      %g_mask_36 = arith.cmpi slt, %g_idx_34, %g_mask_35 : tensor<1024xi32> loc(#loc42)
      %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc43)
      %indices_37 = tt.addptr %indices, %g_idx_34 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc43)
      %indices_38 = arith.constant 0 : i32 loc(#loc44)
      %indices_39 = arith.constant dense<0> : tensor<1024xi32> loc(#loc44)
      %indices_40 = tt.load %indices_37, %g_mask_36, %indices_39 : tensor<1024x!tt.ptr<i32>> loc(#loc44)
      %c0_i32_41 = arith.constant 0 : i32 loc(#loc10)
      %c16_i32 = arith.constant 16 : i32 loc(#loc10)
      %c16_i32_42 = arith.constant 16 : i32 loc(#loc10)
      %4 = arith.bitcast %c0_i32_41 : i32 to i32 loc(#loc10)
      %5 = arith.bitcast %c16_i32 : i32 to i32 loc(#loc10)
      %6 = arith.bitcast %c16_i32_42 : i32 to i32 loc(#loc10)
      %7 = ub.poison : i32 loc(#loc10)
      scf.for %other_offset = %4 to %5 step %6  : i32 {
        %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc45)
        %other_idx_43 = tt.splat %other_offset : i32 -> tensor<16xi32> loc(#loc46)
        %other_idx_44 = arith.extsi %other_idx : tensor<16xi32> to tensor<16xi64> loc(#loc46)
        %other_idx_45 = arith.extsi %other_idx_43 : tensor<16xi32> to tensor<16xi64> loc(#loc46)
        %other_idx_46 = arith.addi %other_idx_44, %other_idx_45 : tensor<16xi64> loc(#loc46)
        %other_idx_47 = arith.constant 2147483647 : i64 loc(#loc46)
        %other_idx_48 = arith.constant -2147483648 : i64 loc(#loc46)
        %other_idx_49 = arith.constant dense<2147483647> : tensor<16xi64> loc(#loc46)
        %other_idx_50 = arith.cmpi sle, %other_idx_46, %other_idx_49 : tensor<16xi64> loc(#loc46)
        %other_idx_51 = arith.constant dense<-2147483648> : tensor<16xi64> loc(#loc46)
        %other_idx_52 = arith.cmpi sge, %other_idx_46, %other_idx_51 : tensor<16xi64> loc(#loc46)
        %other_idx_53 = arith.andi %other_idx_50, %other_idx_52 : tensor<16xi1> loc(#loc46)
        %other_idx_54 = arith.addi %other_idx, %other_idx_43 : tensor<16xi32> loc(#loc46)
        %other_mask = arith.constant 16 : i32 loc(#loc47)
        %other_mask_55 = arith.constant dense<16> : tensor<16xi32> loc(#loc47)
        %other_mask_56 = arith.cmpi slt, %other_idx_54, %other_mask_55 : tensor<16xi32> loc(#loc47)
        %tmp_buf = tt.expand_dims %indices_40 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc48)
        %tmp_buf_57 = arith.constant 16 : i32 loc(#loc49)
        %tmp_buf_58 = arith.constant 16 : i32 loc(#loc49)
        %tmp_buf_59 = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc49)
        %tmp_buf_60 = arith.extsi %tmp_buf : tensor<1024x1xi32> to tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_61 = arith.extsi %tmp_buf_59 : tensor<1024x1xi32> to tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_62 = arith.muli %tmp_buf_60, %tmp_buf_61 : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_63 = arith.constant 2147483647 : i64 loc(#loc49)
        %tmp_buf_64 = arith.constant -2147483648 : i64 loc(#loc49)
        %tmp_buf_65 = arith.constant dense<2147483647> : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_66 = arith.cmpi sle, %tmp_buf_62, %tmp_buf_65 : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_67 = arith.constant dense<-2147483648> : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_68 = arith.cmpi sge, %tmp_buf_62, %tmp_buf_67 : tensor<1024x1xi64> loc(#loc49)
        %tmp_buf_69 = arith.andi %tmp_buf_66, %tmp_buf_68 : tensor<1024x1xi1> loc(#loc49)
        %tmp_buf_70 = arith.muli %tmp_buf, %tmp_buf_59 : tensor<1024x1xi32> loc(#loc49)
        %tmp_buf_71 = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc50)
        %tmp_buf_72 = tt.addptr %tmp_buf_71, %tmp_buf_70 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc50)
        %tmp_buf_73 = tt.expand_dims %other_idx_54 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc51)
        %tmp_buf_74 = tt.broadcast %tmp_buf_72 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc52)
        %tmp_buf_75 = tt.broadcast %tmp_buf_73 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc52)
        %tmp_buf_76 = tt.addptr %tmp_buf_74, %tmp_buf_75 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc52)
        %tmp_buf_77 = tt.expand_dims %g_mask_36 {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc53)
        %tmp_buf_78 = tt.expand_dims %other_mask_56 {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc54)
        %tmp_buf_79 = tt.broadcast %tmp_buf_77 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc55)
        %tmp_buf_80 = tt.broadcast %tmp_buf_78 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc55)
        %tmp_buf_81 = arith.andi %tmp_buf_79, %tmp_buf_80 : tensor<1024x16xi1> loc(#loc55)
        %tmp_buf_82 = tt.load %tmp_buf_76, %tmp_buf_81 : tensor<1024x16x!tt.ptr<f32>> loc(#loc56)
        %8 = tt.expand_dims %g_idx_34 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc23)
        %c16_i32_83 = arith.constant 16 : i32 loc(#loc24)
        %c16_i32_84 = arith.constant 16 : i32 loc(#loc24)
        %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc24)
        %9 = arith.extsi %8 : tensor<1024x1xi32> to tensor<1024x1xi64> loc(#loc24)
        %10 = arith.extsi %cst : tensor<1024x1xi32> to tensor<1024x1xi64> loc(#loc24)
        %11 = arith.muli %9, %10 : tensor<1024x1xi64> loc(#loc24)
        %c2147483647_i64 = arith.constant 2147483647 : i64 loc(#loc24)
        %c-2147483648_i64 = arith.constant -2147483648 : i64 loc(#loc24)
        %cst_85 = arith.constant dense<2147483647> : tensor<1024x1xi64> loc(#loc24)
        %12 = arith.cmpi sle, %11, %cst_85 : tensor<1024x1xi64> loc(#loc24)
        %cst_86 = arith.constant dense<-2147483648> : tensor<1024x1xi64> loc(#loc24)
        %13 = arith.cmpi sge, %11, %cst_86 : tensor<1024x1xi64> loc(#loc24)
        %14 = arith.andi %12, %13 : tensor<1024x1xi1> loc(#loc24)
        %15 = arith.muli %8, %cst : tensor<1024x1xi32> loc(#loc24)
        %16 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc25)
        %17 = tt.addptr %16, %15 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc25)
        %18 = tt.expand_dims %other_idx_54 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc26)
        %19 = tt.broadcast %17 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc27)
        %20 = tt.broadcast %18 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc27)
        %21 = tt.addptr %19, %20 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc27)
        %22 = tt.expand_dims %g_mask_36 {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc28)
        %23 = tt.expand_dims %other_mask_56 {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc29)
        %24 = tt.broadcast %22 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc30)
        %25 = tt.broadcast %23 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc30)
        %26 = arith.andi %24, %25 : tensor<1024x16xi1> loc(#loc30)
        tt.store %21, %tmp_buf_82, %26 : tensor<1024x16x!tt.ptr<f32>> loc(#loc31)
      } loc(#loc10)
    } loc(#loc3)
    tt.return loc(#loc32)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":37:47)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:52)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:69)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc28 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:94)
#loc29 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:115)
#loc30 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:104)
#loc31 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc32 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc37 = loc("g_begin"(#loc1))
#loc38 = loc("g_begin"(#loc2))
#loc39 = loc("g_idx"(#loc4))
#loc40 = loc("g_idx"(#loc5))
#loc41 = loc("g_idx"(#loc6))
#loc42 = loc("g_mask"(#loc7))
#loc43 = loc("indices"(#loc8))
#loc44 = loc("indices"(#loc9))
#loc45 = loc("other_idx"(#loc11))
#loc46 = loc("other_idx"(#loc12))
#loc47 = loc("other_mask"(#loc13))
#loc48 = loc("tmp_buf"(#loc14))
#loc49 = loc("tmp_buf"(#loc15))
#loc50 = loc("tmp_buf"(#loc16))
#loc51 = loc("tmp_buf"(#loc17))
#loc52 = loc("tmp_buf"(#loc18))
#loc53 = loc("tmp_buf"(#loc19))
#loc54 = loc("tmp_buf"(#loc20))
#loc55 = loc("tmp_buf"(#loc21))
#loc56 = loc("tmp_buf"(#loc22))


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc32 = loc("in_ptr"(#loc))
#loc33 = loc("indices_ptr"(#loc))
#loc34 = loc("out_ptr"(#loc))
#loc35 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc36)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc37)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc38)
      %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc39)
      %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc39)
      %g_idx_6 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc40)
      %g_idx_7 = arith.addi %g_idx_5, %g_idx_6 : tensor<1024xi32> loc(#loc40)
      %g_mask = arith.cmpi slt, %g_idx_7, %cst_2 : tensor<1024xi32> loc(#loc41)
      %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc42)
      %indices_8 = tt.addptr %indices, %g_idx_7 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc42)
      %indices_9 = tt.load %indices_8, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc43)
      %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc44)
      %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc45)
      %tmp_buf = tt.expand_dims %indices_9 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc46)
      %tmp_buf_10 = arith.muli %tmp_buf, %cst : tensor<1024x1xi32> loc(#loc47)
      %tmp_buf_11 = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc48)
      %tmp_buf_12 = tt.addptr %tmp_buf_11, %tmp_buf_10 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc48)
      %tmp_buf_13 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
      %tmp_buf_14 = tt.broadcast %tmp_buf_12 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %tmp_buf_15 = tt.broadcast %tmp_buf_13 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_16 = tt.addptr %tmp_buf_14, %tmp_buf_15 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_17 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc51)
      %tmp_buf_18 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc52)
      %tmp_buf_19 = tt.broadcast %tmp_buf_17 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_20 = tt.broadcast %tmp_buf_18 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_21 = arith.andi %tmp_buf_19, %tmp_buf_20 : tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_22 = tt.load %tmp_buf_16, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc54)
      %0 = tt.expand_dims %g_idx_7 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc22)
      %1 = arith.muli %0, %cst : tensor<1024x1xi32> loc(#loc23)
      %2 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc24)
      %3 = tt.addptr %2, %1 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc24)
      %4 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
      %5 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
      %6 = tt.broadcast %4 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc26)
      %7 = tt.addptr %5, %6 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc26)
      %8 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc27)
      %9 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc28)
      %10 = tt.broadcast %8 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc29)
      %11 = tt.broadcast %9 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc29)
      %12 = arith.andi %10, %11 : tensor<1024x16xi1> loc(#loc29)
      tt.store %7, %tmp_buf_22, %12 : tensor<1024x16x!tt.ptr<f32>> loc(#loc30)
    } loc(#loc4)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:69)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:94)
#loc28 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:115)
#loc29 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:104)
#loc30 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc31 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc36 = loc("g_begin"(#loc2))
#loc37 = loc("g_begin"(#loc3))
#loc38 = loc("g_idx"(#loc5))
#loc39 = loc("g_idx"(#loc6))
#loc40 = loc("g_idx"(#loc7))
#loc41 = loc("g_mask"(#loc8))
#loc42 = loc("indices"(#loc9))
#loc43 = loc("indices"(#loc10))
#loc44 = loc("other_idx"(#loc11))
#loc45 = loc("other_mask"(#loc12))
#loc46 = loc("tmp_buf"(#loc13))
#loc47 = loc("tmp_buf"(#loc14))
#loc48 = loc("tmp_buf"(#loc15))
#loc49 = loc("tmp_buf"(#loc16))
#loc50 = loc("tmp_buf"(#loc17))
#loc51 = loc("tmp_buf"(#loc18))
#loc52 = loc("tmp_buf"(#loc19))
#loc53 = loc("tmp_buf"(#loc20))
#loc54 = loc("tmp_buf"(#loc21))


// -----// IR Dump Before TritonRewriteTensorDescriptorToPointer (triton-rewrite-tensor-descriptor-to-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc32 = loc("in_ptr"(#loc))
#loc33 = loc("indices_ptr"(#loc))
#loc34 = loc("out_ptr"(#loc))
#loc35 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc36)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc37)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc38)
      %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc39)
      %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc39)
      %g_idx_6 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc40)
      %g_idx_7 = arith.addi %g_idx_5, %g_idx_6 : tensor<1024xi32> loc(#loc40)
      %g_mask = arith.cmpi slt, %g_idx_7, %cst_2 : tensor<1024xi32> loc(#loc41)
      %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc42)
      %indices_8 = tt.addptr %indices, %g_idx_7 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc42)
      %indices_9 = tt.load %indices_8, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc43)
      %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc44)
      %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc45)
      %tmp_buf = tt.expand_dims %indices_9 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc46)
      %tmp_buf_10 = arith.muli %tmp_buf, %cst : tensor<1024x1xi32> loc(#loc47)
      %tmp_buf_11 = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc48)
      %tmp_buf_12 = tt.addptr %tmp_buf_11, %tmp_buf_10 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc48)
      %tmp_buf_13 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
      %tmp_buf_14 = tt.broadcast %tmp_buf_12 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %tmp_buf_15 = tt.broadcast %tmp_buf_13 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_16 = tt.addptr %tmp_buf_14, %tmp_buf_15 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_17 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc51)
      %tmp_buf_18 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc52)
      %tmp_buf_19 = tt.broadcast %tmp_buf_17 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_20 = tt.broadcast %tmp_buf_18 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_21 = arith.andi %tmp_buf_19, %tmp_buf_20 : tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_22 = tt.load %tmp_buf_16, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc54)
      %0 = tt.expand_dims %g_idx_7 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc22)
      %1 = arith.muli %0, %cst : tensor<1024x1xi32> loc(#loc23)
      %2 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc24)
      %3 = tt.addptr %2, %1 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc24)
      %4 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
      %5 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
      %6 = tt.broadcast %4 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc26)
      %7 = tt.addptr %5, %6 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc26)
      %8 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc27)
      %9 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc28)
      %10 = tt.broadcast %8 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc29)
      %11 = tt.broadcast %9 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc29)
      %12 = arith.andi %10, %11 : tensor<1024x16xi1> loc(#loc29)
      tt.store %7, %tmp_buf_22, %12 : tensor<1024x16x!tt.ptr<f32>> loc(#loc30)
    } loc(#loc4)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:69)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:94)
#loc28 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:115)
#loc29 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:104)
#loc30 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc31 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc36 = loc("g_begin"(#loc2))
#loc37 = loc("g_begin"(#loc3))
#loc38 = loc("g_idx"(#loc5))
#loc39 = loc("g_idx"(#loc6))
#loc40 = loc("g_idx"(#loc7))
#loc41 = loc("g_mask"(#loc8))
#loc42 = loc("indices"(#loc9))
#loc43 = loc("indices"(#loc10))
#loc44 = loc("other_idx"(#loc11))
#loc45 = loc("other_mask"(#loc12))
#loc46 = loc("tmp_buf"(#loc13))
#loc47 = loc("tmp_buf"(#loc14))
#loc48 = loc("tmp_buf"(#loc15))
#loc49 = loc("tmp_buf"(#loc16))
#loc50 = loc("tmp_buf"(#loc17))
#loc51 = loc("tmp_buf"(#loc18))
#loc52 = loc("tmp_buf"(#loc19))
#loc53 = loc("tmp_buf"(#loc20))
#loc54 = loc("tmp_buf"(#loc21))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc32 = loc("in_ptr"(#loc))
#loc33 = loc("indices_ptr"(#loc))
#loc34 = loc("out_ptr"(#loc))
#loc35 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc36)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc37)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc38)
      %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc39)
      %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc39)
      %g_idx_6 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc40)
      %g_idx_7 = arith.addi %g_idx_5, %g_idx_6 : tensor<1024xi32> loc(#loc40)
      %g_mask = arith.cmpi slt, %g_idx_7, %cst_2 : tensor<1024xi32> loc(#loc41)
      %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc42)
      %indices_8 = tt.addptr %indices, %g_idx_7 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc42)
      %indices_9 = tt.load %indices_8, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc43)
      %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc44)
      %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc45)
      %tmp_buf = tt.expand_dims %indices_9 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc46)
      %tmp_buf_10 = arith.muli %tmp_buf, %cst : tensor<1024x1xi32> loc(#loc47)
      %tmp_buf_11 = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc48)
      %tmp_buf_12 = tt.addptr %tmp_buf_11, %tmp_buf_10 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc48)
      %tmp_buf_13 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
      %tmp_buf_14 = tt.broadcast %tmp_buf_12 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %tmp_buf_15 = tt.broadcast %tmp_buf_13 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_16 = tt.addptr %tmp_buf_14, %tmp_buf_15 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_17 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc51)
      %tmp_buf_18 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc52)
      %tmp_buf_19 = tt.broadcast %tmp_buf_17 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_20 = tt.broadcast %tmp_buf_18 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_21 = arith.andi %tmp_buf_19, %tmp_buf_20 : tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_22 = tt.load %tmp_buf_16, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc54)
      %0 = tt.expand_dims %g_idx_7 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc22)
      %1 = arith.muli %0, %cst : tensor<1024x1xi32> loc(#loc23)
      %2 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc24)
      %3 = tt.addptr %2, %1 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc24)
      %4 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
      %5 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
      %6 = tt.broadcast %4 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc26)
      %7 = tt.addptr %5, %6 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc26)
      %8 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc27)
      %9 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc28)
      %10 = tt.broadcast %8 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc29)
      %11 = tt.broadcast %9 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc29)
      %12 = arith.andi %10, %11 : tensor<1024x16xi1> loc(#loc29)
      tt.store %7, %tmp_buf_22, %12 : tensor<1024x16x!tt.ptr<f32>> loc(#loc30)
    } loc(#loc4)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:69)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:94)
#loc28 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:115)
#loc29 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:104)
#loc30 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc31 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc36 = loc("g_begin"(#loc2))
#loc37 = loc("g_begin"(#loc3))
#loc38 = loc("g_idx"(#loc5))
#loc39 = loc("g_idx"(#loc6))
#loc40 = loc("g_idx"(#loc7))
#loc41 = loc("g_mask"(#loc8))
#loc42 = loc("indices"(#loc9))
#loc43 = loc("indices"(#loc10))
#loc44 = loc("other_idx"(#loc11))
#loc45 = loc("other_mask"(#loc12))
#loc46 = loc("tmp_buf"(#loc13))
#loc47 = loc("tmp_buf"(#loc14))
#loc48 = loc("tmp_buf"(#loc15))
#loc49 = loc("tmp_buf"(#loc16))
#loc50 = loc("tmp_buf"(#loc17))
#loc51 = loc("tmp_buf"(#loc18))
#loc52 = loc("tmp_buf"(#loc19))
#loc53 = loc("tmp_buf"(#loc20))
#loc54 = loc("tmp_buf"(#loc21))


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc32 = loc("in_ptr"(#loc))
#loc33 = loc("indices_ptr"(#loc))
#loc34 = loc("out_ptr"(#loc))
#loc35 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc36)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc37)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc38)
      %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc39)
      %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc39)
      %g_idx_6 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc40)
      %g_idx_7 = arith.addi %g_idx_5, %g_idx_6 : tensor<1024xi32> loc(#loc40)
      %g_mask = arith.cmpi slt, %g_idx_7, %cst_2 : tensor<1024xi32> loc(#loc41)
      %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc42)
      %indices_8 = tt.addptr %indices, %g_idx_7 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc42)
      %indices_9 = tt.load %indices_8, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc43)
      %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc44)
      %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc45)
      %tmp_buf = tt.expand_dims %indices_9 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc46)
      %tmp_buf_10 = arith.muli %tmp_buf, %cst : tensor<1024x1xi32> loc(#loc47)
      %tmp_buf_11 = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc48)
      %tmp_buf_12 = tt.addptr %tmp_buf_11, %tmp_buf_10 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc48)
      %tmp_buf_13 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
      %tmp_buf_14 = tt.broadcast %tmp_buf_12 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %tmp_buf_15 = tt.broadcast %tmp_buf_13 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_16 = tt.addptr %tmp_buf_14, %tmp_buf_15 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_17 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc51)
      %tmp_buf_18 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc52)
      %tmp_buf_19 = tt.broadcast %tmp_buf_17 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_20 = tt.broadcast %tmp_buf_18 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_21 = arith.andi %tmp_buf_19, %tmp_buf_20 : tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_22 = tt.load %tmp_buf_16, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc54)
      %0 = tt.expand_dims %g_idx_7 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc22)
      %1 = arith.muli %0, %cst : tensor<1024x1xi32> loc(#loc23)
      %2 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc24)
      %3 = tt.addptr %2, %1 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc24)
      %4 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
      %5 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
      %6 = tt.broadcast %4 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc26)
      %7 = tt.addptr %5, %6 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc26)
      %8 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc27)
      %9 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc28)
      %10 = tt.broadcast %8 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc29)
      %11 = tt.broadcast %9 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc29)
      %12 = arith.andi %10, %11 : tensor<1024x16xi1> loc(#loc29)
      tt.store %7, %tmp_buf_22, %12 : tensor<1024x16x!tt.ptr<f32>> loc(#loc30)
    } loc(#loc4)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:69)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:94)
#loc28 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:115)
#loc29 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:104)
#loc30 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc31 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc36 = loc("g_begin"(#loc2))
#loc37 = loc("g_begin"(#loc3))
#loc38 = loc("g_idx"(#loc5))
#loc39 = loc("g_idx"(#loc6))
#loc40 = loc("g_idx"(#loc7))
#loc41 = loc("g_mask"(#loc8))
#loc42 = loc("indices"(#loc9))
#loc43 = loc("indices"(#loc10))
#loc44 = loc("other_idx"(#loc11))
#loc45 = loc("other_mask"(#loc12))
#loc46 = loc("tmp_buf"(#loc13))
#loc47 = loc("tmp_buf"(#loc14))
#loc48 = loc("tmp_buf"(#loc15))
#loc49 = loc("tmp_buf"(#loc16))
#loc50 = loc("tmp_buf"(#loc17))
#loc51 = loc("tmp_buf"(#loc18))
#loc52 = loc("tmp_buf"(#loc19))
#loc53 = loc("tmp_buf"(#loc20))
#loc54 = loc("tmp_buf"(#loc21))


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc32 = loc("in_ptr"(#loc))
#loc33 = loc("indices_ptr"(#loc))
#loc34 = loc("out_ptr"(#loc))
#loc35 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc36)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc37)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc38)
      %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc39)
      %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc39)
      %g_idx_6 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc40)
      %g_idx_7 = arith.addi %g_idx_5, %g_idx_6 : tensor<1024xi32> loc(#loc40)
      %g_mask = arith.cmpi slt, %g_idx_7, %cst_2 : tensor<1024xi32> loc(#loc41)
      %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc42)
      %indices_8 = tt.addptr %indices, %g_idx_7 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc42)
      %indices_9 = tt.load %indices_8, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc43)
      %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc44)
      %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc45)
      %tmp_buf = tt.expand_dims %indices_9 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc46)
      %tmp_buf_10 = arith.muli %tmp_buf, %cst : tensor<1024x1xi32> loc(#loc47)
      %tmp_buf_11 = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc48)
      %tmp_buf_12 = tt.addptr %tmp_buf_11, %tmp_buf_10 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc48)
      %tmp_buf_13 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
      %tmp_buf_14 = tt.broadcast %tmp_buf_12 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %tmp_buf_15 = tt.broadcast %tmp_buf_13 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_16 = tt.addptr %tmp_buf_14, %tmp_buf_15 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_17 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc51)
      %tmp_buf_18 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc52)
      %tmp_buf_19 = tt.broadcast %tmp_buf_17 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_20 = tt.broadcast %tmp_buf_18 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_21 = arith.andi %tmp_buf_19, %tmp_buf_20 : tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_22 = tt.load %tmp_buf_16, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc54)
      %0 = tt.expand_dims %g_idx_7 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc22)
      %1 = arith.muli %0, %cst : tensor<1024x1xi32> loc(#loc23)
      %2 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc24)
      %3 = tt.addptr %2, %1 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc24)
      %4 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
      %5 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
      %6 = tt.broadcast %4 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc26)
      %7 = tt.addptr %5, %6 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc26)
      %8 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc27)
      %9 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc28)
      %10 = tt.broadcast %8 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc29)
      %11 = tt.broadcast %9 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc29)
      %12 = arith.andi %10, %11 : tensor<1024x16xi1> loc(#loc29)
      tt.store %7, %tmp_buf_22, %12 : tensor<1024x16x!tt.ptr<f32>> loc(#loc30)
    } loc(#loc4)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:69)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:94)
#loc28 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:115)
#loc29 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:104)
#loc30 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc31 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc36 = loc("g_begin"(#loc2))
#loc37 = loc("g_begin"(#loc3))
#loc38 = loc("g_idx"(#loc5))
#loc39 = loc("g_idx"(#loc6))
#loc40 = loc("g_idx"(#loc7))
#loc41 = loc("g_mask"(#loc8))
#loc42 = loc("indices"(#loc9))
#loc43 = loc("indices"(#loc10))
#loc44 = loc("other_idx"(#loc11))
#loc45 = loc("other_mask"(#loc12))
#loc46 = loc("tmp_buf"(#loc13))
#loc47 = loc("tmp_buf"(#loc14))
#loc48 = loc("tmp_buf"(#loc15))
#loc49 = loc("tmp_buf"(#loc16))
#loc50 = loc("tmp_buf"(#loc17))
#loc51 = loc("tmp_buf"(#loc18))
#loc52 = loc("tmp_buf"(#loc19))
#loc53 = loc("tmp_buf"(#loc20))
#loc54 = loc("tmp_buf"(#loc21))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc32 = loc("in_ptr"(#loc))
#loc33 = loc("indices_ptr"(#loc))
#loc34 = loc("out_ptr"(#loc))
#loc35 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc36)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc37)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc38)
      %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc39)
      %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc39)
      %g_idx_6 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc40)
      %g_idx_7 = arith.addi %g_idx_5, %g_idx_6 : tensor<1024xi32> loc(#loc40)
      %g_mask = arith.cmpi slt, %g_idx_7, %cst_2 : tensor<1024xi32> loc(#loc41)
      %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc42)
      %indices_8 = tt.addptr %indices, %g_idx_7 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc42)
      %indices_9 = tt.load %indices_8, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc43)
      %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc44)
      %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc45)
      %tmp_buf = tt.expand_dims %indices_9 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc46)
      %tmp_buf_10 = arith.muli %tmp_buf, %cst : tensor<1024x1xi32> loc(#loc47)
      %tmp_buf_11 = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc48)
      %tmp_buf_12 = tt.addptr %tmp_buf_11, %tmp_buf_10 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc48)
      %tmp_buf_13 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc49)
      %tmp_buf_14 = tt.broadcast %tmp_buf_12 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %tmp_buf_15 = tt.broadcast %tmp_buf_13 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_16 = tt.addptr %tmp_buf_14, %tmp_buf_15 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc50)
      %tmp_buf_17 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc51)
      %tmp_buf_18 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc52)
      %tmp_buf_19 = tt.broadcast %tmp_buf_17 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_20 = tt.broadcast %tmp_buf_18 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_21 = arith.andi %tmp_buf_19, %tmp_buf_20 : tensor<1024x16xi1> loc(#loc53)
      %tmp_buf_22 = tt.load %tmp_buf_16, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc54)
      %0 = tt.expand_dims %g_idx_7 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc22)
      %1 = arith.muli %0, %cst : tensor<1024x1xi32> loc(#loc23)
      %2 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc24)
      %3 = tt.addptr %2, %1 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc24)
      %4 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc25)
      %5 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
      %6 = tt.broadcast %4 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc26)
      %7 = tt.addptr %5, %6 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc26)
      %8 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc27)
      %9 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc28)
      %10 = tt.broadcast %8 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc29)
      %11 = tt.broadcast %9 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc29)
      %12 = arith.andi %10, %11 : tensor<1024x16xi1> loc(#loc29)
      tt.store %7, %tmp_buf_22, %12 : tensor<1024x16x!tt.ptr<f32>> loc(#loc30)
    } loc(#loc4)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:69)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:94)
#loc28 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:115)
#loc29 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:104)
#loc30 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc31 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc36 = loc("g_begin"(#loc2))
#loc37 = loc("g_begin"(#loc3))
#loc38 = loc("g_idx"(#loc5))
#loc39 = loc("g_idx"(#loc6))
#loc40 = loc("g_idx"(#loc7))
#loc41 = loc("g_mask"(#loc8))
#loc42 = loc("indices"(#loc9))
#loc43 = loc("indices"(#loc10))
#loc44 = loc("other_idx"(#loc11))
#loc45 = loc("other_mask"(#loc12))
#loc46 = loc("tmp_buf"(#loc13))
#loc47 = loc("tmp_buf"(#loc14))
#loc48 = loc("tmp_buf"(#loc15))
#loc49 = loc("tmp_buf"(#loc16))
#loc50 = loc("tmp_buf"(#loc17))
#loc51 = loc("tmp_buf"(#loc18))
#loc52 = loc("tmp_buf"(#loc19))
#loc53 = loc("tmp_buf"(#loc20))
#loc54 = loc("tmp_buf"(#loc21))


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc28 = loc("in_ptr"(#loc))
#loc29 = loc("indices_ptr"(#loc))
#loc30 = loc("out_ptr"(#loc))
#loc31 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc32)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc33)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc34)
      %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc35)
      %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc35)
      %g_idx_6 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc36)
      %g_idx_7 = arith.addi %g_idx_5, %g_idx_6 : tensor<1024xi32> loc(#loc36)
      %g_mask = arith.cmpi slt, %g_idx_7, %cst_2 : tensor<1024xi32> loc(#loc37)
      %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc38)
      %indices_8 = tt.addptr %indices, %g_idx_7 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc38)
      %indices_9 = tt.load %indices_8, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc39)
      %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc40)
      %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc41)
      %tmp_buf = tt.expand_dims %indices_9 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc42)
      %tmp_buf_10 = arith.muli %tmp_buf, %cst : tensor<1024x1xi32> loc(#loc43)
      %tmp_buf_11 = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc44)
      %tmp_buf_12 = tt.addptr %tmp_buf_11, %tmp_buf_10 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc44)
      %tmp_buf_13 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc45)
      %tmp_buf_14 = tt.broadcast %tmp_buf_12 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc46)
      %tmp_buf_15 = tt.broadcast %tmp_buf_13 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc46)
      %tmp_buf_16 = tt.addptr %tmp_buf_14, %tmp_buf_15 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc46)
      %tmp_buf_17 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc47)
      %tmp_buf_18 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc48)
      %tmp_buf_19 = tt.broadcast %tmp_buf_17 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc49)
      %tmp_buf_20 = tt.broadcast %tmp_buf_18 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc49)
      %tmp_buf_21 = arith.andi %tmp_buf_19, %tmp_buf_20 : tensor<1024x16xi1> loc(#loc49)
      %tmp_buf_22 = tt.load %tmp_buf_16, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %0 = tt.expand_dims %g_idx_7 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc22)
      %1 = arith.muli %0, %cst : tensor<1024x1xi32> loc(#loc23)
      %2 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc24)
      %3 = tt.addptr %2, %1 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc24)
      %4 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc25)
      %5 = tt.addptr %4, %tmp_buf_15 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc25)
      tt.store %5, %tmp_buf_22, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
    } loc(#loc4)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc32 = loc("g_begin"(#loc2))
#loc33 = loc("g_begin"(#loc3))
#loc34 = loc("g_idx"(#loc5))
#loc35 = loc("g_idx"(#loc6))
#loc36 = loc("g_idx"(#loc7))
#loc37 = loc("g_mask"(#loc8))
#loc38 = loc("indices"(#loc9))
#loc39 = loc("indices"(#loc10))
#loc40 = loc("other_idx"(#loc11))
#loc41 = loc("other_mask"(#loc12))
#loc42 = loc("tmp_buf"(#loc13))
#loc43 = loc("tmp_buf"(#loc14))
#loc44 = loc("tmp_buf"(#loc15))
#loc45 = loc("tmp_buf"(#loc16))
#loc46 = loc("tmp_buf"(#loc17))
#loc47 = loc("tmp_buf"(#loc18))
#loc48 = loc("tmp_buf"(#loc19))
#loc49 = loc("tmp_buf"(#loc20))
#loc50 = loc("tmp_buf"(#loc21))


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc28 = loc("in_ptr"(#loc))
#loc29 = loc("indices_ptr"(#loc))
#loc30 = loc("out_ptr"(#loc))
#loc31 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc32)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc33)
    %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc34)
    %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc35)
    %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc35)
    %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc36)
    %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc37)
    %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc38)
    %tmp_buf = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc39)
    %tmp_buf_6 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc40)
    %tmp_buf_7 = tt.broadcast %tmp_buf_6 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc41)
    %tmp_buf_8 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc42)
    %tmp_buf_9 = tt.broadcast %tmp_buf_8 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc43)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc14)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx_10 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc44)
      %g_idx_11 = arith.addi %g_idx_5, %g_idx_10 : tensor<1024xi32> loc(#loc44)
      %g_mask = arith.cmpi slt, %g_idx_11, %cst_2 : tensor<1024xi32> loc(#loc45)
      %indices_12 = tt.addptr %indices, %g_idx_11 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc36)
      %indices_13 = tt.load %indices_12, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc46)
      %tmp_buf_14 = tt.expand_dims %indices_13 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc47)
      %tmp_buf_15 = arith.muli %tmp_buf_14, %cst : tensor<1024x1xi32> loc(#loc48)
      %tmp_buf_16 = tt.addptr %tmp_buf, %tmp_buf_15 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc39)
      %tmp_buf_17 = tt.broadcast %tmp_buf_16 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc41)
      %tmp_buf_18 = tt.addptr %tmp_buf_17, %tmp_buf_7 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc41)
      %tmp_buf_19 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc49)
      %tmp_buf_20 = tt.broadcast %tmp_buf_19 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc43)
      %tmp_buf_21 = arith.andi %tmp_buf_20, %tmp_buf_9 : tensor<1024x16xi1> loc(#loc43)
      %tmp_buf_22 = tt.load %tmp_buf_18, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %1 = tt.expand_dims %g_idx_11 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc23)
      %2 = arith.muli %1, %cst : tensor<1024x1xi32> loc(#loc24)
      %3 = tt.addptr %0, %2 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc14)
      %4 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc25)
      %5 = tt.addptr %4, %tmp_buf_7 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc25)
      tt.store %5, %tmp_buf_22, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
    } loc(#loc15)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc32 = loc("g_begin"(#loc2))
#loc33 = loc("g_begin"(#loc3))
#loc34 = loc("g_idx"(#loc4))
#loc35 = loc("g_idx"(#loc5))
#loc36 = loc("indices"(#loc6))
#loc37 = loc("other_idx"(#loc7))
#loc38 = loc("other_mask"(#loc8))
#loc39 = loc("tmp_buf"(#loc9))
#loc40 = loc("tmp_buf"(#loc10))
#loc41 = loc("tmp_buf"(#loc11))
#loc42 = loc("tmp_buf"(#loc12))
#loc43 = loc("tmp_buf"(#loc13))
#loc44 = loc("g_idx"(#loc16))
#loc45 = loc("g_mask"(#loc17))
#loc46 = loc("indices"(#loc18))
#loc47 = loc("tmp_buf"(#loc19))
#loc48 = loc("tmp_buf"(#loc20))
#loc49 = loc("tmp_buf"(#loc21))
#loc50 = loc("tmp_buf"(#loc22))


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc28 = loc("in_ptr"(#loc))
#loc29 = loc("indices_ptr"(#loc))
#loc30 = loc("out_ptr"(#loc))
#loc31 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc32)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc33)
    %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc34)
    %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc35)
    %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc35)
    %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc36)
    %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc37)
    %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc38)
    %tmp_buf = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc39)
    %tmp_buf_6 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc40)
    %tmp_buf_7 = tt.broadcast %tmp_buf_6 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc41)
    %tmp_buf_8 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc42)
    %tmp_buf_9 = tt.broadcast %tmp_buf_8 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc43)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc14)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx_10 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc44)
      %g_idx_11 = arith.addi %g_idx_5, %g_idx_10 : tensor<1024xi32> loc(#loc44)
      %g_mask = arith.cmpi slt, %g_idx_11, %cst_2 : tensor<1024xi32> loc(#loc45)
      %indices_12 = tt.addptr %indices, %g_idx_11 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc36)
      %indices_13 = tt.load %indices_12, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc46)
      %tmp_buf_14 = tt.expand_dims %indices_13 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc47)
      %tmp_buf_15 = arith.muli %tmp_buf_14, %cst : tensor<1024x1xi32> loc(#loc48)
      %tmp_buf_16 = tt.addptr %tmp_buf, %tmp_buf_15 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc39)
      %tmp_buf_17 = tt.broadcast %tmp_buf_16 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc41)
      %tmp_buf_18 = tt.addptr %tmp_buf_17, %tmp_buf_7 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc41)
      %tmp_buf_19 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc49)
      %tmp_buf_20 = tt.broadcast %tmp_buf_19 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc43)
      %tmp_buf_21 = arith.andi %tmp_buf_20, %tmp_buf_9 : tensor<1024x16xi1> loc(#loc43)
      %tmp_buf_22 = tt.load %tmp_buf_18, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %1 = tt.expand_dims %g_idx_11 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc23)
      %2 = arith.muli %1, %cst : tensor<1024x1xi32> loc(#loc24)
      %3 = tt.addptr %0, %2 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc14)
      %4 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc25)
      %5 = tt.addptr %4, %tmp_buf_7 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc25)
      tt.store %5, %tmp_buf_22, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
    } loc(#loc15)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc32 = loc("g_begin"(#loc2))
#loc33 = loc("g_begin"(#loc3))
#loc34 = loc("g_idx"(#loc4))
#loc35 = loc("g_idx"(#loc5))
#loc36 = loc("indices"(#loc6))
#loc37 = loc("other_idx"(#loc7))
#loc38 = loc("other_mask"(#loc8))
#loc39 = loc("tmp_buf"(#loc9))
#loc40 = loc("tmp_buf"(#loc10))
#loc41 = loc("tmp_buf"(#loc11))
#loc42 = loc("tmp_buf"(#loc12))
#loc43 = loc("tmp_buf"(#loc13))
#loc44 = loc("g_idx"(#loc16))
#loc45 = loc("g_mask"(#loc17))
#loc46 = loc("indices"(#loc18))
#loc47 = loc("tmp_buf"(#loc19))
#loc48 = loc("tmp_buf"(#loc20))
#loc49 = loc("tmp_buf"(#loc21))
#loc50 = loc("tmp_buf"(#loc22))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":29:0)
#loc28 = loc("in_ptr"(#loc))
#loc29 = loc("indices_ptr"(#loc))
#loc30 = loc("out_ptr"(#loc))
#loc31 = loc("dim"(#loc))
module {
  tt.func public @origin_index_select(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %indices_ptr: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("indices_ptr"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %dim: i32 {tt.divisibility = 16 : i32} loc("dim"(#loc))) attributes {noinline = false} {
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<16> : tensor<1024x1xi32> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<1024xi32> loc(#loc1)
    %cst_2 = arith.constant dense<1971940> : tensor<1024xi32> loc(#loc1)
    %c49299_i32 = arith.constant 49299 : i32 loc(#loc1)
    %g_begin = tt.get_program_id x : i32 loc(#loc32)
    %g_begin_3 = arith.muli %g_begin, %c49299_i32 : i32 loc(#loc33)
    %g_idx = tt.make_range {end = 1024 : i32, start = 0 : i32} : tensor<1024xi32> loc(#loc34)
    %g_idx_4 = tt.splat %g_begin_3 : i32 -> tensor<1024xi32> loc(#loc35)
    %g_idx_5 = arith.addi %g_idx, %g_idx_4 : tensor<1024xi32> loc(#loc35)
    %indices = tt.splat %indices_ptr : !tt.ptr<i32> -> tensor<1024x!tt.ptr<i32>> loc(#loc36)
    %other_idx = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc37)
    %other_mask = arith.cmpi slt, %other_idx, %cst_0 : tensor<16xi32> loc(#loc38)
    %tmp_buf = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc39)
    %tmp_buf_6 = tt.expand_dims %other_idx {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc40)
    %tmp_buf_7 = tt.broadcast %tmp_buf_6 : tensor<1x16xi32> -> tensor<1024x16xi32> loc(#loc41)
    %tmp_buf_8 = tt.expand_dims %other_mask {axis = 0 : i32} : tensor<16xi1> -> tensor<1x16xi1> loc(#loc42)
    %tmp_buf_9 = tt.broadcast %tmp_buf_8 : tensor<1x16xi1> -> tensor<1024x16xi1> loc(#loc43)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<1024x1x!tt.ptr<f32>> loc(#loc14)
    scf.for %goffs = %c0_i32 to %c49299_i32 step %c1024_i32  : i32 {
      %g_idx_10 = tt.splat %goffs : i32 -> tensor<1024xi32> loc(#loc44)
      %g_idx_11 = arith.addi %g_idx_5, %g_idx_10 : tensor<1024xi32> loc(#loc44)
      %g_mask = arith.cmpi slt, %g_idx_11, %cst_2 : tensor<1024xi32> loc(#loc45)
      %indices_12 = tt.addptr %indices, %g_idx_11 : tensor<1024x!tt.ptr<i32>>, tensor<1024xi32> loc(#loc36)
      %indices_13 = tt.load %indices_12, %g_mask, %cst_1 : tensor<1024x!tt.ptr<i32>> loc(#loc46)
      %tmp_buf_14 = tt.expand_dims %indices_13 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc47)
      %tmp_buf_15 = arith.muli %tmp_buf_14, %cst : tensor<1024x1xi32> loc(#loc48)
      %tmp_buf_16 = tt.addptr %tmp_buf, %tmp_buf_15 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc39)
      %tmp_buf_17 = tt.broadcast %tmp_buf_16 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc41)
      %tmp_buf_18 = tt.addptr %tmp_buf_17, %tmp_buf_7 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc41)
      %tmp_buf_19 = tt.expand_dims %g_mask {axis = 1 : i32} : tensor<1024xi1> -> tensor<1024x1xi1> loc(#loc49)
      %tmp_buf_20 = tt.broadcast %tmp_buf_19 : tensor<1024x1xi1> -> tensor<1024x16xi1> loc(#loc43)
      %tmp_buf_21 = arith.andi %tmp_buf_20, %tmp_buf_9 : tensor<1024x16xi1> loc(#loc43)
      %tmp_buf_22 = tt.load %tmp_buf_18, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc50)
      %1 = tt.expand_dims %g_idx_11 {axis = 1 : i32} : tensor<1024xi32> -> tensor<1024x1xi32> loc(#loc23)
      %2 = arith.muli %1, %cst : tensor<1024x1xi32> loc(#loc24)
      %3 = tt.addptr %0, %2 : tensor<1024x1x!tt.ptr<f32>>, tensor<1024x1xi32> loc(#loc14)
      %4 = tt.broadcast %3 : tensor<1024x1x!tt.ptr<f32>> -> tensor<1024x16x!tt.ptr<f32>> loc(#loc25)
      %5 = tt.addptr %4, %tmp_buf_7 : tensor<1024x16x!tt.ptr<f32>>, tensor<1024x16xi32> loc(#loc25)
      tt.store %5, %tmp_buf_22, %tmp_buf_21 : tensor<1024x16x!tt.ptr<f32>> loc(#loc26)
    } loc(#loc15)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:26)
#loc3 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":32:31)
#loc4 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:27)
#loc5 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:42)
#loc6 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:40)
#loc7 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":38:37)
#loc8 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":39:37)
#loc9 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:39)
#loc10 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:78)
#loc11 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:68)
#loc12 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:115)
#loc13 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:104)
#loc14 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:31)
#loc15 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:35)
#loc16 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":34:52)
#loc17 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":35:25)
#loc18 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":36:47)
#loc19 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:47)
#loc20 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:57)
#loc21 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:94)
#loc22 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":40:87)
#loc23 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:37)
#loc24 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:48)
#loc25 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:59)
#loc26 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":41:87)
#loc27 = loc("/home/devro/workspace/ts_sandbox/test_loop_index_select.py":33:4)
#loc32 = loc("g_begin"(#loc2))
#loc33 = loc("g_begin"(#loc3))
#loc34 = loc("g_idx"(#loc4))
#loc35 = loc("g_idx"(#loc5))
#loc36 = loc("indices"(#loc6))
#loc37 = loc("other_idx"(#loc7))
#loc38 = loc("other_mask"(#loc8))
#loc39 = loc("tmp_buf"(#loc9))
#loc40 = loc("tmp_buf"(#loc10))
#loc41 = loc("tmp_buf"(#loc11))
#loc42 = loc("tmp_buf"(#loc12))
#loc43 = loc("tmp_buf"(#loc13))
#loc44 = loc("g_idx"(#loc16))
#loc45 = loc("g_mask"(#loc17))
#loc46 = loc("indices"(#loc18))
#loc47 = loc("tmp_buf"(#loc19))
#loc48 = loc("tmp_buf"(#loc20))
#loc49 = loc("tmp_buf"(#loc21))
#loc50 = loc("tmp_buf"(#loc22))


