// -----// IR Dump Before Inliner (inline) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc12 = loc("in_ptr"(#loc))
#loc13 = loc("t"(#loc))
#loc14 = loc("out_ptr"(#loc))
#loc15 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %pid = tt.get_program_id x : i32 loc(#loc16)
    %offsets = arith.constant 32 : i32 loc(#loc17)
    %offsets_0 = arith.constant 32 : i32 loc(#loc17)
    %offsets_1 = arith.extsi %pid : i32 to i64 loc(#loc17)
    %offsets_2 = arith.extsi %offsets_0 : i32 to i64 loc(#loc17)
    %offsets_3 = arith.muli %offsets_1, %offsets_2 : i64 loc(#loc17)
    %offsets_4 = arith.constant 2147483647 : i64 loc(#loc17)
    %offsets_5 = arith.constant -2147483648 : i64 loc(#loc17)
    %offsets_6 = arith.cmpi sle, %offsets_3, %offsets_4 : i64 loc(#loc17)
    %offsets_7 = arith.cmpi sge, %offsets_3, %offsets_5 : i64 loc(#loc17)
    %offsets_8 = arith.andi %offsets_6, %offsets_7 : i1 loc(#loc17)
    %offsets_9 = arith.muli %pid, %offsets_0 : i32 loc(#loc17)
    %offsets_10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc18)
    %offsets_11 = tt.splat %offsets_9 : i32 -> tensor<32xi32> loc(#loc19)
    %offsets_12 = arith.extsi %offsets_11 : tensor<32xi32> to tensor<32xi64> loc(#loc19)
    %offsets_13 = arith.extsi %offsets_10 : tensor<32xi32> to tensor<32xi64> loc(#loc19)
    %offsets_14 = arith.addi %offsets_12, %offsets_13 : tensor<32xi64> loc(#loc19)
    %offsets_15 = arith.constant 2147483647 : i64 loc(#loc19)
    %offsets_16 = arith.constant -2147483648 : i64 loc(#loc19)
    %offsets_17 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc19)
    %offsets_18 = arith.cmpi sle, %offsets_14, %offsets_17 : tensor<32xi64> loc(#loc19)
    %offsets_19 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc19)
    %offsets_20 = arith.cmpi sge, %offsets_14, %offsets_19 : tensor<32xi64> loc(#loc19)
    %offsets_21 = arith.andi %offsets_18, %offsets_20 : tensor<32xi1> loc(#loc19)
    %offsets_22 = arith.addi %offsets_11, %offsets_10 : tensor<32xi32> loc(#loc19)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc20)
    %mask_23 = arith.cmpi slt, %offsets_22, %mask : tensor<32xi32> loc(#loc20)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc21)
    %x_24 = tt.addptr %x, %offsets_22 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc21)
    %x_25 = arith.constant 0.000000e+00 : f32 loc(#loc22)
    %x_26 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc22)
    %x_27 = tt.load %x_24, %mask_23, %x_26 : tensor<32x!tt.ptr<f32>> loc(#loc22)
    %result = arith.constant 2.000000e+00 : f32 loc(#loc23)
    %result_28 = arith.constant 2.000000e+00 : f32 loc(#loc23)
    %result_29 = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc23)
    %result_30 = arith.mulf %x_27, %result_29 : tensor<32xf32> loc(#loc23)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %1 = tt.addptr %0, %offsets_22 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    tt.store %1, %result_30, %mask_23 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    tt.return loc(#loc11)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc16 = loc("pid"(#loc1))
#loc17 = loc("offsets"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("mask"(#loc5))
#loc21 = loc("x"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("result"(#loc8))


// -----// IR Dump Before Canonicalizer (canonicalize) ('tt.func' operation: @load) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc12 = loc("in_ptr"(#loc))
#loc13 = loc("t"(#loc))
#loc14 = loc("out_ptr"(#loc))
#loc15 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %pid = tt.get_program_id x : i32 loc(#loc16)
    %offsets = arith.constant 32 : i32 loc(#loc17)
    %offsets_0 = arith.constant 32 : i32 loc(#loc17)
    %offsets_1 = arith.extsi %pid : i32 to i64 loc(#loc17)
    %offsets_2 = arith.extsi %offsets_0 : i32 to i64 loc(#loc17)
    %offsets_3 = arith.muli %offsets_1, %offsets_2 : i64 loc(#loc17)
    %offsets_4 = arith.constant 2147483647 : i64 loc(#loc17)
    %offsets_5 = arith.constant -2147483648 : i64 loc(#loc17)
    %offsets_6 = arith.cmpi sle, %offsets_3, %offsets_4 : i64 loc(#loc17)
    %offsets_7 = arith.cmpi sge, %offsets_3, %offsets_5 : i64 loc(#loc17)
    %offsets_8 = arith.andi %offsets_6, %offsets_7 : i1 loc(#loc17)
    %offsets_9 = arith.muli %pid, %offsets_0 : i32 loc(#loc17)
    %offsets_10 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc18)
    %offsets_11 = tt.splat %offsets_9 : i32 -> tensor<32xi32> loc(#loc19)
    %offsets_12 = arith.extsi %offsets_11 : tensor<32xi32> to tensor<32xi64> loc(#loc19)
    %offsets_13 = arith.extsi %offsets_10 : tensor<32xi32> to tensor<32xi64> loc(#loc19)
    %offsets_14 = arith.addi %offsets_12, %offsets_13 : tensor<32xi64> loc(#loc19)
    %offsets_15 = arith.constant 2147483647 : i64 loc(#loc19)
    %offsets_16 = arith.constant -2147483648 : i64 loc(#loc19)
    %offsets_17 = arith.constant dense<2147483647> : tensor<32xi64> loc(#loc19)
    %offsets_18 = arith.cmpi sle, %offsets_14, %offsets_17 : tensor<32xi64> loc(#loc19)
    %offsets_19 = arith.constant dense<-2147483648> : tensor<32xi64> loc(#loc19)
    %offsets_20 = arith.cmpi sge, %offsets_14, %offsets_19 : tensor<32xi64> loc(#loc19)
    %offsets_21 = arith.andi %offsets_18, %offsets_20 : tensor<32xi1> loc(#loc19)
    %offsets_22 = arith.addi %offsets_11, %offsets_10 : tensor<32xi32> loc(#loc19)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc20)
    %mask_23 = arith.cmpi slt, %offsets_22, %mask : tensor<32xi32> loc(#loc20)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc21)
    %x_24 = tt.addptr %x, %offsets_22 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc21)
    %x_25 = arith.constant 0.000000e+00 : f32 loc(#loc22)
    %x_26 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc22)
    %x_27 = tt.load %x_24, %mask_23, %x_26 : tensor<32x!tt.ptr<f32>> loc(#loc22)
    %result = arith.constant 2.000000e+00 : f32 loc(#loc23)
    %result_28 = arith.constant 2.000000e+00 : f32 loc(#loc23)
    %result_29 = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc23)
    %result_30 = arith.mulf %x_27, %result_29 : tensor<32xf32> loc(#loc23)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc9)
    %1 = tt.addptr %0, %offsets_22 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc9)
    tt.store %1, %result_30, %mask_23 : tensor<32x!tt.ptr<f32>> loc(#loc10)
    tt.return loc(#loc11)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc16 = loc("pid"(#loc1))
#loc17 = loc("offsets"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("mask"(#loc5))
#loc21 = loc("x"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("result"(#loc8))


// -----// IR Dump Before TritonRewriteTensorPointer (triton-rewrite-tensor-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


// -----// IR Dump Before TritonRewriteTensorDescriptorToPointer (triton-rewrite-tensor-descriptor-to-pointer) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


// -----// IR Dump Before TritonCombineOps (triton-combine) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


// -----// IR Dump Before TritonReorderBroadcast (triton-reorder-broadcast) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


// -----// IR Dump Before TritonLoopInvariantCodeMotion (triton-licm) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


// -----// IR Dump Before SymbolDCE (symbol-dce) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


// -----// IR Dump Before TritonLoopUnroll (triton-loop-unroll) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


// -----// IR Dump Before CSE (cse) ('builtin.module' operation) //----- //
#loc = loc("/home/devro/workspace/ts_sandbox/load.py":10:0)
#loc13 = loc("in_ptr"(#loc))
#loc14 = loc("t"(#loc))
#loc15 = loc("out_ptr"(#loc))
#loc16 = loc("size0"(#loc))
module {
  tt.func public @load(%in_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("in_ptr"(#loc)), %t: !tt.ptr<i32> {tt.divisibility = 16 : i32} loc("t"(#loc)), %out_ptr: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("out_ptr"(#loc)), %size0: i32 {tt.divisibility = 16 : i32} loc("size0"(#loc))) attributes {noinline = false} {
    %cst = arith.constant dense<2.000000e+00> : tensor<32xf32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<32xf32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc17)
    %offsets = arith.muli %pid, %c32_i32 : i32 loc(#loc18)
    %offsets_1 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc19)
    %offsets_2 = tt.splat %offsets : i32 -> tensor<32xi32> loc(#loc20)
    %offsets_3 = arith.addi %offsets_2, %offsets_1 : tensor<32xi32> loc(#loc20)
    %mask = tt.splat %size0 : i32 -> tensor<32xi32> loc(#loc21)
    %mask_4 = arith.cmpi slt, %offsets_3, %mask : tensor<32xi32> loc(#loc21)
    %x = tt.splat %in_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc22)
    %x_5 = tt.addptr %x, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc22)
    %x_6 = tt.load %x_5, %mask_4, %cst_0 : tensor<32x!tt.ptr<f32>> loc(#loc23)
    %result = arith.mulf %x_6, %cst : tensor<32xf32> loc(#loc24)
    %0 = tt.splat %out_ptr : !tt.ptr<f32> -> tensor<32x!tt.ptr<f32>> loc(#loc10)
    %1 = tt.addptr %0, %offsets_3 : tensor<32x!tt.ptr<f32>>, tensor<32xi32> loc(#loc10)
    tt.store %1, %result, %mask_4 : tensor<32x!tt.ptr<f32>> loc(#loc11)
    tt.return loc(#loc12)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/home/devro/workspace/ts_sandbox/load.py":11:24)
#loc3 = loc("/home/devro/workspace/ts_sandbox/load.py":12:20)
#loc4 = loc("/home/devro/workspace/ts_sandbox/load.py":12:46)
#loc5 = loc("/home/devro/workspace/ts_sandbox/load.py":12:33)
#loc6 = loc("/home/devro/workspace/ts_sandbox/load.py":14:21)
#loc7 = loc("/home/devro/workspace/ts_sandbox/load.py":16:25)
#loc8 = loc("/home/devro/workspace/ts_sandbox/load.py":16:16)
#loc9 = loc("/home/devro/workspace/ts_sandbox/load.py":18:15)
#loc10 = loc("/home/devro/workspace/ts_sandbox/load.py":19:23)
#loc11 = loc("/home/devro/workspace/ts_sandbox/load.py":19:32)
#loc12 = loc("/home/devro/workspace/ts_sandbox/load.py":19:4)
#loc17 = loc("pid"(#loc2))
#loc18 = loc("offsets"(#loc3))
#loc19 = loc("offsets"(#loc4))
#loc20 = loc("offsets"(#loc5))
#loc21 = loc("mask"(#loc6))
#loc22 = loc("x"(#loc7))
#loc23 = loc("x"(#loc8))
#loc24 = loc("result"(#loc9))


